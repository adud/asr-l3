## Remarques ##

  * Pourquoi les sauts absolus sont-ils signés ?
  * 4 pointeurs, dont 2 utilisables, c'est vraiment **très** peu : typiquement, si je veux stocker un tableau en mémoire, j'aimerais bien simplement pouvoir mettre une constante dans mon pointeur, puis ensuite ajouter à mon pointeur une constante multipliée par un entier pour accéder à une case particulière du tableau. C'est déjà assez pénible de devoir rajouter des setctr et des getctr, mais ça devient clairement critique quand il s'agit de multiplier des matrices, car en plus il faut des push et des pop, associés à des setctr et getctr, pour pallier au manque de pointeurs.
  D'autant qu'on pourrait utiliser les registres comme pointeur en ajoutant simplement un bit à `readze`.
Seul problème : la pile, mais il suffirait d'ajouter une opérande `pop` qui
ne serait plus du sucre syntaxique, et on pourrait à la rigueur supprimer
`getctr` et `setctr`, qu'on utilise principalement pour  déplacer les
pointeurs a0 et a1. On perdrait certes la possibilité de faire des `jump` 
un peu artistiques en poussant des registres dans le pc.
  * assembler les distances de saut à la main, **plus jamais** (surtout avec 
des opérandes de taille variable).
  * utiliser des majuscules dans un nom de fichier, c'est s'exposer à 
des problèmes sur, à tout hasard, FAT32, ou pire : FAT16.
  * Les opérateurs `sub2i` et `sub3i` permettent de faire les opérations du
    type `ri <- rj - cst`, mais pas `ri <- cst - rj`. On est obligé de le faire
    en deux opérations avec un `leti` suivi d'un `sub2` ou `sub3` (ce qui nous
    oblige à utiliser un registre supplémentaire), ou seulement dans des cas
    particuliers de le faire en une opération avec `xor3i`.
  * Mapper l'écran sur 0x10000 nous oblige à des codes de moins de 64 kio, ce qui peut s'avérer assez problématique pour stocker, par exemple un fond d'écran de 320 kio, surtout quand on propose 16 Mio de mémoire.
## Sur l'optimisation des échanges ##

   * De manière générale, on lit beaucoup plus que l'on n'écrit.
   * Il semblerait que la grande majorité des échanges entre la mémoire et le processeur soient dus à l'échange de morceaux de code, les échanges de données 'bruts' étant négligeables (inférieurs à 5%) (exception faite des routines écoutant le clavier ou l'horloge simulés dans la mémoire). Ainsi, minimiser les échanges reviendrait simplement à minimiser la taille du code.
   * Cette affirmation reste à nuancer dans des cas très orientés lecture/écriture, comme le pathologique `dd.s` où 52 bits d'instructions servent à lire et écrire 64 bits d'instruction (sur une architecture 64 bits).
   * Pour ce qui est d'optimiser les écritures, on peut de même considérer comme négligeable l'ensemble des écritures à partir du moment où on utilise l'écran, un clear_screen écrivant 0x50000 bits d'un coup.
   * L'attente active nuit au programme et brouille les stats (voir les .png des rendus 2 et 3).
   * Remarques rétrospectives sur le codage de Huffmann : il est assez difficile de dire avec des statistiques globales quelles sont les opérations les plus utilisées : en effet, un certain nombre de programmes se comportant comme : Initialisation -> Boucle principale -> fin, les opérations à l'intérieur de la boucle principale auront un poids important. Cependant cela peut varier assez conséquemment entre deux programmes (voir la différence entre les rendus 2 et 3 (png)). Il faudrait un nombre conséquent de programmes afin de savoir si les statistiques sur les opérandes sont bonnes.
